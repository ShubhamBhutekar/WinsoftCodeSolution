Q1: Replace each array element by its corresponding rank

Solution: 

using System;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        int[] array = { 10, 8, 15, 12, 6, 20, 1 };
        int[] ranks = RankArray(array);
        
        Console.WriteLine("Input array: " + string.Join(", ", array));
        Console.WriteLine("Output ranks: " + string.Join(", ", ranks));
    }

    static int[] RankArray(int[] arr)
    {
        int[] sortedArray = arr.OrderBy(x => x).ToArray();
        int[] ranks = new int[arr.Length];

        for (int i = 0; i < arr.Length; i++)
        {
            int rank = Array.IndexOf(sortedArray, arr[i]) + 1;
            ranks[i] = rank;
        }

        return ranks;
    }
}


Q2: Given a string s, find the length of the longest substring without repeating characters.

Solution: 

using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        string s1 = "abcabcbb";
        Console.WriteLine("Longest substring length without repeating characters for " + s1 + ": " + LengthOfLongestSubstring(s1));
    }

    static int LengthOfLongestSubstring(string s)
    {
        if (s == null || s.Length == 0)
            return 0;

        Dictionary<char, int> charIndexMap = new Dictionary<char, int>();
        int maxLength = 0;
        int start = 0;

        for (int end = 0; end < s.Length; end++)
        {
            if (charIndexMap.ContainsKey(s[end]))
            {
                start = Math.Max(start, charIndexMap[s[end]] + 1);
            }

            charIndexMap[s[end]] = end;
            maxLength = Math.Max(maxLength, end - start + 1);
        }

        return maxLength;
    }
}


Q3:Find non-repeating characters in a string 

Solution: 

using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        string input = "aabbcdeeffgh";
        List<char> nonRepeatingChars = FindNonRepeatingCharacters(input);

        Console.WriteLine("Non-repeating characters in the string:");
        foreach (char c in nonRepeatingChars)
        {
            Console.Write(c + " ");
        }
    }

    static List<char> FindNonRepeatingCharacters(string input)
    {
        Dictionary<char, int> charFrequency = new Dictionary<char, int>();

        foreach (char c in input)
        {
            if (charFrequency.ContainsKey(c))
            {
                charFrequency[c]++;
            }
            else
            {
                charFrequency[c] = 1;
            }
        }
        List<char> nonRepeatingChars = new List<char>();
        foreach (KeyValuePair<char, int> pair in charFrequency)
        {
            if (pair.Value == 1)
            {
                nonRepeatingChars.Add(pair.Key);
            }
        }

        return nonRepeatingChars;
    }
}


Q4:Write a C# program to find the frequency of each unique element in the array and 
store the results in a dictionary where the key is the element and the value is its frequency.
Then, print the elements and their frequencies. 

Solution: 

using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        int[] numbers = { 1, 2, 2, 3, 3, 3, 4, 4, 4, 4 };

        Dictionary<int, int> frequencyMap = GetElementFrequencies(numbers);

        foreach (var kvp in frequencyMap)
        {
            Console.WriteLine($"Element: {kvp.Key}, Frequency: {kvp.Value}");
        }
    }

    static Dictionary<int, int> GetElementFrequencies(int[] numbers)
    {
        Dictionary<int, int> frequencyMap = new Dictionary<int, int>();

        foreach (int num in numbers)
        {
            if (frequencyMap.ContainsKey(num))
            {
                frequencyMap[num]++;
            }
            else
            {
                frequencyMap[num] = 1;
            }
        }

        return frequencyMap;
    }
}

